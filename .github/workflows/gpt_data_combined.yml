name: Combine Markdown Files for AirRepsGPT

on:
  push:
    branches:
      - main
    paths:
      - docs/**/*.md

jobs:
  combine-markdown:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Combine Markdown Files
        run: |
          cat ./docs/introduction/overview.md ./docs/introduction/sellers.md ./docs/introduction/packaging.md ./docs/introduction/connectivity.md ./docs/introduction/battery-life.md ./docs/introduction/features.md ./docs/introduction/anc-explained.md ./docs/introduction/build-quality.md ./docs/introduction/sound-quality.md > ultimateguide.md
          echo "Introduction files into ultimateguide.md"
          cat ./docs/dictionary/w2c.md ./docs/dictionary/reps-clones.md ./docs/dictionary/knockoffs.md ./docs/dictionary/guinea-pig.md ./docs/dictionary/quality-control.md ./docs/dictionary/legit-check.md ./docs/dictionary/agent.md ./docs/dictionary/markings.md >> ultimateguide.md
          echo "Dictionnary files into ultimateguide.md"
          cat ./docs/version-info/general.md ./docs/version-info/airpods-3.md ./docs/version-info/airpods-2.md ./docs/version-info/airpods-pro.md ./docs/version-info/airpods-pro-2.md ./docs/version-info/airpods-max.md >> ultimateguide.md
          echo "Version info into ultimateguide.md"
          cat ./docs/ordering/how-to-buy.md ./docs/ordering/qc-lc.md >> ultimateguide.md
          echo "Ordering into ultimateguide.md"
          cat ./docs/links/info.md ./docs/links/airpods-3.md ./docs/links/airpods-2.md ./docs/links/airpods-pro.md ./docs/links/airpods-pro-2.md ./docs/links/airpods-max.md >> ultimateguide.md
          echo "Links into ultimateguide.md"
          cat ./docs/useful-apps.md ./docs/troubleshooting.md ./docs/contributing.md >> ultimateguide.md
          echo "Extra into ultimateguide.md"
          echo "Combined Markdown files into ultimateguide.md"

      - name: Change markdown arrays to jsonl
        run : |
          cat ultimateguide.md | tr -s ' ' | sed 's/ \?| \?/;/g' | sed 's/;-\+.*-\+;//' | sed 's/^;/\["/' | sed 's/;/","/g' | sed 's/,"$/\]/g' | sed ':a;N;$!ba;s/]\n\n\[/]\n[/g' > tmp_ultimateguide.md && cat tmp_ultimateguide.md > ultimateguide.md && rm tmp_ultimateguide.md

      - name: Upload Combined File as Artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 90
          path: ultimateguide.md

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: |
          corepack enable

      - name: Install Dependencies
        run: |
          yarn add openai fs

      - name: Upload Combined File to OpenAI Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VECTOR_STORE_ID: ${{ secrets.VECTOR_STORE_ID }}
        run: |
          node -e "
          const fs = require('fs');
          const OpenAI = require('openai');

          const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

          (async () => {
              // Check for required environment variables
              if (!process.env.OPENAI_API_KEY || !process.env.VECTOR_STORE_ID) {
                  console.error('Missing required environment variables.');
                  process.exit(1);
              }

              try {
                  // Retrieve the vector store using the stored ID from environment variables
                  const vector = await openai.vectorStores.retrieve(process.env.VECTOR_STORE_ID);
                  if (!vector) {
                      console.warn('Vector store not found; cannot create link to uploaded file.');
                      process.exit(1);
                  }
                  console.log('Retrieved vector store.');

                  // List all files in OpenAI's file storage
                  const { data: files } = await openai.files.list();
                  console.log('Retrieved files from OpenAI storage.');

                  // Upload the new 'ultimateguide.md' file to OpenAI's file storage for use by assistants
                  const upload = await openai.files.create({ file: fs.createReadStream('ultimateguide.md'), purpose: 'assistants' });
                  console.log('Uploaded new file:', upload.filename);

                  // Find the file named 'ultimateguide.md'
                  const file = files.find(f => f.filename === 'ultimateguide.md');
                  if (file) {
                      console.log('Found existing file:', file.filename);
                      await openai.files.del(file.id);
                      console.log('Deleted existing file:', file.filename);
                  }

                  // Create a link between the uploaded file and the vector store
                  await openai.vectorStores.files.create(vector.id, { file_id: upload.id });
                  console.log('Successfully linked uploaded file to vector store.');

              } catch (error) {
                  console.error('An error occurred:', error.message);
                  process.exit(1);
              }
          })();
          "
